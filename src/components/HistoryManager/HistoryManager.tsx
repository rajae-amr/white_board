import React from 'react';
import { DrawingElement } from '../Whiteboard/WhiteboardTypes';

// ูุงุฌูุฉ ุฎุตุงุฆุต ูุฏูุฑ ุงูุชุงุฑูุฎ
export interface HistoryManagerProps {
  canUndo: boolean;
  canRedo: boolean;
  onUndo: () => void;
  onRedo: () => void;
  onClearAll: () => void;
}

/**
 * ูููู ุฅุฏุงุฑุฉ ุงูุชุงุฑูุฎ ููุชุฑุงุฌุน ูุงูุฅุนุงุฏุฉ ููุณุญ ูู ุดูุก
 */
const HistoryManager: React.FC<HistoryManagerProps> = ({
  canUndo,
  canRedo,
  onUndo,
  onRedo,
  onClearAll
}) => {
  return (
    <div className="history-manager">
      <button
        className={`history-button undo-button ${!canUndo ? 'disabled' : ''}`}
        onClick={onUndo}
        disabled={!canUndo}
        title="ุชุฑุงุฌุน"
      >
        <span className="icon">โฉ</span>
        <span className="text">ุชุฑุงุฌุน</span>
      </button>
      
      <button
        className={`history-button redo-button ${!canRedo ? 'disabled' : ''}`}
        onClick={onRedo}
        disabled={!canRedo}
        title="ุฅุนุงุฏุฉ"
      >
        <span className="icon">โช</span>
        <span className="text">ุฅุนุงุฏุฉ</span>
      </button>
      
      <button
        className="history-button clear-button"
        onClick={onClearAll}
        title="ูุณุญ ุงููู"
      >
        <span className="icon">๐๏ธ</span>
        <span className="text">ูุณุญ ุงููู</span>
      </button>
    </div>
  );
};

// ููุงุณ ูุฅุฏุงุฑุฉ ุงูุชุงุฑูุฎ
export class History<T> {
  private history: T[][] = [];
  private index: number = -1;
  
  /**
   * ุฅุถุงูุฉ ุญุงูุฉ ุฌุฏูุฏุฉ ุฅูู ุงูุชุงุฑูุฎ
   */
  addState(state: T[]): void {
    // ุญุฐู ุงูุชุงุฑูุฎ ุงูุฐู ูุชุฌุงูุฒ ุงููุคุดุฑ ุงูุญุงูู
    this.history = this.history.slice(0, this.index + 1);
    
    // ุฅุถุงูุฉ ุงูุญุงูุฉ ุงูุฌุฏูุฏุฉ
    this.history.push([...state]);
    this.index = this.history.length - 1;
  }
  
  /**
   * ุงูุชุฑุงุฌุน ุนู ุงูุญุงูุฉ ุงูุญุงููุฉ
   */
  undo(): T[] | null {
    if (this.canUndo()) {
      this.index--;
      return this.getCurrentState();
    }
    return null;
  }
  
  /**
   * ุฅุนุงุฏุฉ ุงูุญุงูุฉ ุงูุณุงุจูุฉ
   */
  redo(): T[] | null {
    if (this.canRedo()) {
      this.index++;
      return this.getCurrentState();
    }
    return null;
  }
  
  /**
   * ุงูุญุตูู ุนูู ุงูุญุงูุฉ ุงูุญุงููุฉ
   */
  getCurrentState(): T[] | null {
    if (this.index >= 0 && this.index < this.history.length) {
      return [...this.history[this.index]];
    }
    return null;
  }
  
  /**
   * ูู ูููู ุงูุชุฑุงุฌุนุ
   */
  canUndo(): boolean {
    return this.index > 0;
  }
  
  /**
   * ูู ูููู ุงูุฅุนุงุฏุฉุ
   */
  canRedo(): boolean {
    return this.index < this.history.length - 1;
  }
  
  /**
   * ูุณุญ ุงูุชุงุฑูุฎ
   */
  clear(): void {
    this.history = [];
    this.index = -1;
  }
  
  /**
   * ุฅุถุงูุฉ ุญุงูุฉ ุฃูููุฉ (ูุงุฑุบุฉ) ุฅุฐุง ูุงู ุงูุชุงุฑูุฎ ูุงุฑุบูุง
   */
  initialize(initialState: T[] = []): void {
    if (this.history.length === 0) {
      this.addState(initialState);
    }
  }
}

export default HistoryManager;
